// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieProject.DataAccess.Contexts;

#nullable disable

namespace MovieProject.DataAccess.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250827162051_AddCategoryData")]
    partial class AddCategoryData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdafa56b-368b-4633-adb2-963aa41d0809"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3131),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("204fcd24-81fe-461e-bee3-899ee1714ee8"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3135),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("a36ac339-74cc-4c40-8de6-0bc72fcd4e0c"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3147),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = new Guid("ec9c24e4-7bb7-48eb-a61f-a652c884716b"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3149),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("f68a6b18-6e50-41ec-b6e3-121f7619ce84"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3151),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("1d10cdbd-73de-4f8f-b1c1-0c679e6baf0e"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3153),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e00e3aa-2aa2-4bad-ae37-25c16d34acc1"),
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3303),
                            Description = "British-American film director, producer, and screenwriter.",
                            FirstName = "Christopher",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("d93b273f-3c4d-465c-bfa0-1693820ba43f"),
                            BirthDate = new DateTime(1946, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3311),
                            Description = "American film director, producer, and screenwriter.",
                            FirstName = "Steven",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Spielberg"
                        },
                        new
                        {
                            Id = new Guid("2d2aace2-f183-4b7c-90ef-4b4d284a0159"),
                            BirthDate = new DateTime(1942, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3314),
                            Description = "American film director, producer, screenwriter, and actor.",
                            FirstName = "Martin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Scorsese"
                        },
                        new
                        {
                            Id = new Guid("90a57c3d-5d8d-499e-81c6-8b6355781e90"),
                            BirthDate = new DateTime(1963, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3316),
                            Description = "American filmmaker, actor, and screenwriter.",
                            FirstName = "Quentin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Tarantino"
                        },
                        new
                        {
                            Id = new Guid("9ead7742-3a96-4e1b-8969-f97fc1f401d6"),
                            BirthDate = new DateTime(1954, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3318),
                            Description = "Canadian filmmaker and environmental advocate.",
                            FirstName = "James",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Cameron"
                        });
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("IMDB")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8468f525-e0d6-4609-beb6-ba02327f69aa"),
                            CategoryId = new Guid("bdafa56b-368b-4633-adb2-963aa41d0809"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3339),
                            Description = "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.",
                            DirectorId = new Guid("6e00e3aa-2aa2-4bad-ae37-25c16d34acc1"),
                            IMDB = 8.8m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Inception",
                            PublishDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4468d1ca-5808-47f2-8067-53323d027662"),
                            CategoryId = new Guid("bdafa56b-368b-4633-adb2-963aa41d0809"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3350),
                            Description = "When the menace known as the Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham.",
                            DirectorId = new Guid("6e00e3aa-2aa2-4bad-ae37-25c16d34acc1"),
                            IMDB = 9.0m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "The Dark Knight",
                            PublishDate = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0182e892-6cf0-481c-8ba2-df832db5b333"),
                            CategoryId = new Guid("bdafa56b-368b-4633-adb2-963aa41d0809"),
                            CreateAt = new DateTime(2025, 8, 27, 16, 20, 51, 289, DateTimeKind.Utc).AddTicks(3354),
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                            DirectorId = new Guid("6e00e3aa-2aa2-4bad-ae37-25c16d34acc1"),
                            IMDB = 8.6m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Interstellar",
                            PublishDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MovieProject.Entities.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieProject.Entities.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Movie", b =>
                {
                    b.HasOne("MovieProject.Entities.Entities.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieProject.Entities.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieProject.Entities.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
